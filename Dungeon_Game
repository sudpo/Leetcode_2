算法1： 自底向上dp 

dungeon[i][j] 表示从[i][j]出发到达最右底所需要的最小生命值

class Solution {
public:
    int calculateMinimumHP(vector<vector<int>>& dungeon) {
        int n = dungeon.size();
        if(n == 0) {
            return 0;
        }
        int m = dungeon[0].size();
        if(m == 0) {
            return 0;
        }

        dungeon[n-1][m-1] = dungeon[n-1][m-1] > 0 ? 1 : 1-dungeon[n-1][m-1];
        for(int j = m -2; j >= 0; --j){
            if(dungeon[n-1][j] >= 0 ) {
                dungeon[n-1][j] = (dungeon[n-1][j+1] - dungeon[n-1][j]) > 1 ? dungeon[n-1][j+1] - dungeon[n-1][j] : 1 ;
            }
            else
            {
                dungeon[n-1][j] = dungeon[n-1][j+1] - dungeon[n-1][j];
            }
        }

        for(int i = n -2; i >= 0; --i){
            if(dungeon[i][m-1] >= 0) {
                dungeon[i][m-1] = (dungeon[i+1][m-1] - dungeon[i][m-1]) > 1 ? dungeon[i+1][m-1] - dungeon[i][m-1] : 1;
            }else{
                dungeon[i][m-1] = dungeon[i+1][m-1] - dungeon[i][m-1];
            }
        }

        for(int i = n -2; i >=0; --i){
            for(int j = m -2; j >= 0; --j){
                if(dungeon[i][j] >= 0) {
                    int tmp = min(dungeon[i+1][j], dungeon[i][j+1]) - dungeon[i][j];
                    dungeon[i][j] = tmp > 1 ? tmp : 1 ;
                }else{
                    dungeon[i][j] = min(dungeon[i+1][j], dungeon[i][j+1]) - dungeon[i][j];
                }
            }
        }
        return dungeon[0][0];
    }
};
