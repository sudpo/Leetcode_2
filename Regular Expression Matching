This problem has a typical solution using Dynamic Programming. We define the state P[i][j] to be true if s[0..i) matches p[0..j) and false otherwise. Then the state equations are:

P[i][j] = P[i - 1][j - 1], if p[j - 1] != '*' && (s[i - 1] == p[j - 1] || p[j - 1] == '.');
P[i][j] = P[i][j - 2], if p[j - 1] == '*' and the pattern repeats for 0 times;
P[i][j] = P[i - 1][j] && (s[i - 1] == p[j - 2] || p[j - 2] == '.'), if p[j - 1] == '*' and the pattern repeats for at least 1 times.

public:
    bool isMatch(string s, string p) {
        int n = s.size();
        int m = p.size();
        if((n == 0 && m == 0) || s == p){
            return true;
        }

        vector<vector<bool> > dp(n+1, vector<bool> (m+1, false));
        dp[0][0] = true;
        for(int j = 1; j <= m; ++j) {
            dp[0][j] = j > 1 && '*' == p[j-1] && dp[0][j-2];
        }
        for(int i = 1; i <= n; ++i){
            for(int j = 1; j <= m; ++j){
                if(p[j-1] != '*'){
                    dp[i][j] = dp[i-1][j-1] && (s[i-1] == p[j-1] || p[j-1] == '.');
                }
                else{
                    dp[i][j] = dp[i][j-2] || ((s[i-1] == p[j-2] || p[j-2] == '.') && dp[i-1][j]);
                }
            }
        }
        return dp[n][m];
    }
};
