算法： dp
leftMax[i] means the most profit when the last prices is prices[i]
RightMax[i] means the most profit when the first prices is prices[i]

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        if( n < 2) {
            return 0;
        }

        vector<int> leftMax(n, 0);
        vector<int> rightMax(n, 0);
        int minPrice = prices[0];
        for(int i = 1; i < n; ++i ){
            minPrice = min(minPrice, prices[i]);
            leftMax[i] = max(leftMax[i-1], prices[i] - minPrice);
        }
        int maxPrice = prices[n-1];
        for(int i = n-2; i >= 0; --i){
            maxPrice = max(maxPrice, prices[i]);
            rightMax[i] = max(rightMax[i+1], maxPrice - prices[i]);
        }
        int result = 0;
        for(int i = 0; i < n; ++i){
            result = max(result, leftMax[i] + rightMax[i]);
        }
        return result;
    }
};

算法2， 一个神奇的算法
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        if(n < 2) {
            return 0;
        }

        int hold1 = INT_MIN;
        int hold2 = INT_MIN;
        int release1 = 0;
        int release2 = 0;

        for(int i = 0; i < n; ++i) {
            release2 = max(release2, hold2 + prices[i]);  // The maximum if we've just sold 2nd stock so far.

            hold2 = max(hold2, release1 - prices[i]); // The maximum if we've just buy 2nd stock so far.

            release1 = max(release1, hold1 + prices[i]); // The maximum if we've just sold 1nd stock so far.

            hold1 = max(hold1, -prices[i]); // The maximum if we've just buy 1st stock so far.

        }
        return release2;
    }
};
