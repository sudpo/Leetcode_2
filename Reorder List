/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
    ListNode *findMid(ListNode *head){
        ListNode *slow = head;
        ListNode *fast = head->next;
        while(fast != NULL && fast->next != NULL){
            slow = slow->next;
            fast = fast->next->next;
        }
        return slow;
    }

    ListNode *reverse(ListNode *head){
        ListNode *pre = NULL;
        while(head != NULL) {
            ListNode *tmp = head->next;
            head->next = pre;
            pre = head;
            head = tmp;
        }
        return pre;
    }
public:
    void reorderList(ListNode* head) {
        if(head == NULL || head->next == NULL || head->next->next == NULL){
            return;
        }

        ListNode *mid = findMid(head);
        ListNode *rightHead = reverse(mid->next);
        mid->next = NULL;

        ListNode *res = head;
        while(res != NULL && rightHead != NULL){
            ListNode *tmp1 = res->next;
            ListNode *tmp2 = rightHead ->next;
            res->next = rightHead;
            rightHead->next = tmp1;
            rightHead = tmp2;
            res = tmp1;
        }

        return;
    }
};
