class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int n = nums.size();
        vector<int> res(n, 0);
        if(n == 0) {
            return res;
        }
        vector<int> left(n, 0);
        vector<int> right(n, 0);

        left[0] = nums[0];
        right[n-1] = nums[n-1];
        for(int i = 1; i < n; ++i){
            left[i] = left[i-1] * nums[i];
            right[n-i-1] = right[n-i] * nums[n-i-1];
        }

        for(int i = 0; i < n; ++i) {
            if(i == 0) {
                res[i] = right[i+1];
            }
            else if(i == n-1){
                res[i] = left[i-1];
            }
            else{
                res[i] = left[i-1] * right[i+1];
            }
        }
        return res;
    }
};

算法2: 类似于算法1， 但是left[i] = product form [0, i-1], right[i] product form [i+1, n] 所以res[i] = left[i] * right[i] 就不用考虑边界条件了 (O(n)/O(n))


class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int n = nums.size();
        vector<int> res(n, 0);
        if(n == 0) {
            return res;
        }
        vector<int> left(n, 0);
        vector<int> right(n, 0);

        left[0] = 1;
        right[n-1] = 1;
        for(int i = 1; i < n; ++i){
            left[i] = left[i-1] * nums[i-1];
            right[n-i-1] = right[n-i] * nums[n-i];
        }

        for(int i = 0; i < n; ++i) {
            res[i] = left[i] * right[i];
        }
        return res;
    }
};

算法3: 用res 来纪录left 数组， 用int m 来取代right 数组
第一个for循环后 res 就是算法2中的left数组， 然后再反相循环 用m来记录right数组 同时update res 数组
class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int n = nums.size();
        vector<int> res(n, 1);
        if(n == 0) {
            return res;
        }

        for(int i = 1; i < n; ++i){
            res[i] = res[i-1] * nums[i-1];
        }

        int m = 1;
        for(int i = n-1; i >= 0; --i) {
            res[i] *= m;
            m *= nums[i];
        }
        return res;
    }
};
