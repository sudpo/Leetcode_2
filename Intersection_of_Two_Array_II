class Solution {
public:
    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {
        vector<int> res;
        map<int, int> test;
        for(int i = 0; i < nums1.size(); ++i){
            test[nums1[i]]++;
        }
        for(int i = 0; i < nums2.size(); ++i){
            if(test.find(nums2[i]) != test.end() && test[nums2[i]] > 0){
                res.push_back(nums2[i]);
                test[nums2[i]]--;
            }
        }
        return res;
    }
};

对于sorted 的follow up 用双指针可以不需要map（set)

class Solution {
public:
    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {
        vector<int> res;
        sort(nums1.begin(), nums1.end());
        sort(nums2.begin(), nums2.end());

        int start1 = 0;
        int start2 = 0;
        while(start1 < nums1.size() && start2 < nums2.size()){
            if(nums1[start1] == nums2[start2]){
                res.push_back(nums1[start1]);
                start1++;
                start2++;
            }
            else if(nums1[start1] < nums2[start2]){
                start1++;
            }
            else{
                start2++;
            }
        }
        return res;
    }
};
