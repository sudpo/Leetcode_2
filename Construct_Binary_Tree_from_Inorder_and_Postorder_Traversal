/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
    int findPos(vector<int> &inorder, int start, int end, int target){
        for(int i = start; i <= end; ++i){
            if(inorder[i] == target){
                return i;
            }
        }
        return -1;
    }

    TreeNode* buildTree(vector<int>& inorder, int inStart, int inEnd, vector<int> &postorder, int postStart, int postEnd){
        if(inStart > inEnd || postStart > postEnd){
            return NULL;
        }
        int pos = findPos(inorder, inStart, inEnd, postorder[postEnd]);
        TreeNode *node = new TreeNode(postorder[postEnd]);
        node->left = buildTree(inorder, inStart, pos-1, postorder, postStart, postStart + (pos - inStart) -1);
        node->right = buildTree(inorder, pos+1, inEnd, postorder, postStart+(pos - inStart), postEnd -1 );
        return node;
    }
public:
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        int n = inorder.size();
        if(n == 0){
            return NULL;
        }
        int m = postorder.size();
        if(m == 0 || m != n){
            return NULL;
        }

        return buildTree(inorder, 0, n-1, postorder, 0, n-1);
    }
};
