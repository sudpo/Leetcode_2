算法1： 用stack non-recursive 
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> res;
        stack<TreeNode*> stack;
        TreeNode *pCurrent = root;
        while(!stack.empty() || pCurrent != NULL){
            if(pCurrent != NULL){
                stack.push(pCurrent);
                pCurrent = pCurrent->left;
            }else{
                TreeNode *pNode = stack.top();
                res.push_back(pNode->val);
                stack.pop();
                pCurrent = pNode->right;
            }
        }
        return res;
    }
};


算法2： recursive

class Solution {
public:
    public:
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> res;
        if(root == NULL){
            return res;
        }

        inorderTraversal(root, res);
        return res;
    }

    void inorderTraversal(TreeNode* root, vector<int> &res){
        if(root == NULL) {
            return;
        }
        inorderTraversal(root->left, res);
        res.push_back(root->val);
        inorderTraversal(root->right, res);
        return;
    }
};
