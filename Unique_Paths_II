方法1： top->down dp, 需要额外空间

class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int n = obstacleGrid.size();
        if(n == 0){
            return 0;
        }
        int m = obstacleGrid[0].size();
        if(m == 0){
            return 0;
        }

        vector<vector<int> > path(n, vector<int>(m, 0));
        for(int i = 0; i < n; ++i) {
            if(obstacleGrid[i][0] == 1){
                break;
            }else{
                path[i][0] = 1;
            }
        }

        for(int j = 0; j < m; ++j){
            if(obstacleGrid[0][j] == 1){
                break;
            }else{
                path[0][j] = 1;
            }
        }

        for(int i = 1; i < n; ++i){
            for(int j = 1; j < m; ++j){
                if(obstacleGrid[i][j] == 1){
                    path[i][j] = 0;
                }else{
                    path[i][j] = path[i-1][j] + path[i][j-1];
                }
            }
        }
        return path[n-1][m-1];
    }
};

方法2， down->top dp, 利用原来的矩阵 不需要额外空间

class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& grid) {
        int n = grid.size();
        if(n == 0) {
            return 0;
        }
        int m = grid[0].size();
        if(m == 0) {
            return 0;
        }

        for(int i = n-1; i >=0; --i){
            for(int j = m-1; j >= 0; --j){
                if(grid[i][j] == 1){
                    grid[i][j] = 0;
                }
                else{
                    if(i == n-1 && j == m-1){
                        grid[i][j] = 1;
                    }else if(i == n-1){
                        grid[i][j] = grid[i][j+1];
                    }else if(j == m-1){
                        grid[i][j] = grid[i+1][j];
                    }else{
                        grid[i][j] = grid[i+1][j] + grid[i][j+1];
                    }
                }
            }
        }
        return grid[0][0];
    }
};
