/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
    ListNode *merge(ListNode *h1, ListNode *h2){
        if(h1 == NULL){
            return h2;
        }
        if(h2 == NULL){
            return h1;
        }
        if(h1->val < h2->val){
            h1->next = merge(h1->next, h2);
            return h1;
        }else{
            h2->next = merge(h1, h2->next);
            return h2;
        }
    }
public:
    ListNode* sortList(ListNode* head) {
        if(head == NULL || head->next == NULL) {
            return head;
        }

        ListNode *slow = head;
        ListNode *fast = head;
        ListNode *pre = head;

        while(fast != NULL && fast->next != NULL){
            pre = slow;
            slow = slow->next;
            fast = fast->next->next;
        }

        pre->next = NULL;

        ListNode *h1 = sortList(head);
        ListNode *h2 = sortList(slow);

        return merge(h1, h2);
    }
};
