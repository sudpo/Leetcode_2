算法：
step1 保证nums1.size()(m) <= nums2.size()(n). 这样可以去掉很多if--else
step2 找到i,j 满足 i+j = (m+n+1) /2 (  "i + j" is the length of "left_part", and "m - i + n - j" is the length of "right_part". So we need to set "i + j == m - i + n - j" to make sure len(left_part) == len(right_part). But "m + n" may be an odd number. Means we can't divide the whole set {A, B} even. In this case, we can set "i + j == m - i + n - j + 1".) , 且nums1[i-1] <= nums2[j] && nums2[j-1] <= nums1[i] 
      left_part          |        right_part
A[0], A[1], ..., A[i-1]  |  A[i], A[i+1], ..., A[m-1]
B[0], B[1], ..., B[j-1]  |  B[j], B[j+1], ..., B[n-1]

If we can ensure:
1) len(left_part) == len(right_part)
2) max(left_part) <= min(right_part)
 
So, all we need to do is:

 Binary searching i in [0, m], to find an object `i` that:
    B[j-1] <= A[i] and A[i-1] <= B[j], ( where j = (m + n + 1)/2 - i )
And we can do a binary search following steps described below:
<1> Set imin = 0, imax = m, then start searching in [imin, imax]

<2> Set i = (imin + imax)/2, j = (m + n + 1)/2 - i

<3> Now we have len(left_part)==len(right_part). And there are only 3 situations
     that we may encounter:
    <a> B[j-1] <= A[i] and A[i-1] <= B[j]
        Means we have found the object `i`, so stop searching.
    <b> B[j-1] > A[i]
        Means A[i] is too small. We must `ajust` i to get `B[j-1] <= A[i]`.
        Can we `increase` i?
            Yes. Because when i is increased, j will be decreased.
            So B[j-1] is decreased and A[i] is increased, and `B[j-1] <= A[i]` may
            be satisfied.
        Can we `decrease` i?
            `No!` Because when i is decreased, j will be increased.
            So B[j-1] is increased and A[i] is decreased, and B[j-1] <= A[i] will
            be never satisfied.
        So we must `increase` i. That is, we must ajust the searching range to
        [i+1, imax]. So, set imin = i+1, and goto <2>.
    <c> A[i-1] > B[j]
        Means A[i-1] is too big. And we must `decrease` i to get `A[i-1]<=B[j]`.
        That is, we must ajust the searching range to [imin, i-1].
        So, set imax = i-1, and goto <2>.
When the object i is found, the median is:
max(A[i-1], B[j-1]) (when m + n is odd)
or (max(A[i-1], B[j-1]) + min(A[i], B[j]))/2 (when m + n is even)

class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int m = nums1.size();
        int n = nums2.size();
        if(m > n) {
            return findMedianSortedArrays(nums2, nums1);
        }

        int i, j;
        int minIdx = 0;
        int maxIdx = m;
        int half = (m + n + 1) / 2;
        while(minIdx <= maxIdx){
            i = minIdx + (maxIdx - minIdx) / 2;
            j = half - i;
            if(i > 0 && j < n && nums1[i-1] > nums2[j]){
                maxIdx = i-1;
            }else if(j > 0 && i < m && nums2[j-1] > nums1[i]){
                minIdx = i+1;
            }else{
                break;
            }
        }

        int num1;
        if(i == 0){
            num1 = nums2[j-1];
        }else if(j == 0){
            num1 = nums1[i-1];
        }

        else num1 = max(nums1[i-1], nums2[j-1]);
        if((m+n) & 1) return num1;
        int num2;
        if(i == m){
            num2= nums2[j];
        }else if(j == n){
            num2=nums1[i];
        }
        else{
            num2 = min(nums1[i], nums2[j]);
        }
        return double(num2+num1) / 2;
    }
};
