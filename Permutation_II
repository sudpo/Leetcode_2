算法1： 用permutations I 一样的code 不停调用nextPermutation

class Solution {
private:
    void nextPermutation(vector<int> &nums){
        if(nums.size() < 2){
            return;
        }
        int n = nums.size();

        int k = -1;
        for(int i = n -2; i >= 0; --i){
            if(nums[i] < nums[i+1]){
                k = i;
                break;
            }
        }
        if(k == -1){
            reverse(nums.begin(), nums.end());
            return;
        }
        int l = -1;
        for(int i = n -1; i > k; --i){
            if(nums[i] > nums[k]){
                l = i;
                break;
            }
        }

        swap(nums[k], nums[l]);
        reverse(nums.begin() + k + 1, nums.end());
        return;
    }
public:
    vector<vector<int>> permuteUnique(vector<int>& nums) {
        vector<vector<int> > res;
        if(nums.size() == 0) {
            return res;
        }

        sort(nums.begin(), nums.end());
        res.push_back(nums);
        nextPermutation(nums);
        while(nums != res[0]){
            res.push_back(nums);
            nextPermutation(nums);
        }
        return res;
    }
};

算法2： backtracking
去重的方法 如果跟上一个元素相同 如果上一个元素没有使用则当前元素也不使用

class Solution {
    void permute(vector<int>& nums, vector<int> &solution, vector<vector<int> > &res, vector<bool> &visited){
        if(solution.size() == nums.size()){
            res.push_back(solution);
            return;
        }

        for(int i = 0; i < nums.size(); ++i){
            if(visited[i] == false){
                if(i == 0 || nums[i] != nums[i-1] || (nums[i] == nums[i-1] && visited[i-1])){
                    solution.push_back(nums[i]);
                    visited[i] = true;
                    permute(nums, solution, res, visited);
                    visited[i] = false;
                    solution.pop_back();
                }
            }
        }
    }

public:
    vector<vector<int>> permuteUnique(vector<int>& nums) {
        vector<vector<int> > res;
        int n = nums.size();
        if(n == 0){
            return res;
        }

        vector<int> solution;
        vector<bool> visited(n, false);

        sort(nums.begin(), nums.end());
        permute(nums, solution, res, visited);
        return res;
    }
};
