/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {

    int findPos(vector<int> &inorder, int start, int end, int target){
        for(int i = start; i <= end; ++i){
            if(inorder[i] == target) {
                return i;
            }
        }
        return -1;
    }

    TreeNode* buildTree(vector<int>& preorder, int preStart, int preEnd, vector<int> &inorder, int inStart, int inEnd){
        if(preStart > preEnd || inStart > inEnd){
            return NULL;
        }
        int pos = findPos(inorder, inStart, inEnd, preorder[preStart]);
        TreeNode* node = new TreeNode(preorder[preStart]);
        node->left = buildTree(preorder, preStart+1, preStart + (pos - inStart), inorder, inStart, pos-1);
        node->right = buildTree(preorder, preStart + (pos - inStart) + 1, preEnd, inorder, pos+1, inEnd);
        return node;
    }

public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        int n = preorder.size();
        if(n == 0){
            return NULL;
        }
        int m = inorder.size();
        if(m == 0 || m != n){
            return NULL;
        }
        return buildTree(preorder, 0, preorder.size()-1, inorder, 0, inorder.size()-1);
    }
};
