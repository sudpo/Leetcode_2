暴力解法：(O(n^2)) 
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int> result(2);
        if(nums.size() < 2) {
            return result;
        }
        for(int i = 0; i < nums.size() - 1 ; ++i){
            for(int j = i+1; j < nums.size(); ++j){
                if(nums[i] + nums[j] == target){
                    result[0] = i;
                    result[1] = j;
                    return result;
                }
            }
        }
        return result;
    }
};

Hash table : (O(n) / O(n))

注意这里对有重复元素的处理方式， no need to initial the map at the beginning, initial it as it goes 

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int> result(2);
        if(nums.size() < 2) {
            return result;
        }
        unordered_map<int, int> map;
      
        for(int i = 0; i < nums.size(); ++i){
            int numToFind = target - nums[i];
            if(map.find(numToFind) != map.end()){
                result[0] = map[numToFind];
                result[1] = i;
                return result;
            }else{
                map[nums[i]] = i;
            }
        }
        return result;
    }
};
