算法 （O(lgN) worst case O(N) )
要点 when nums[mid] == nums[end] we couldn't sure the position of minimum in mid's left or right, so just let upper bound reduce one.

class Solution {
public:
    int findMin(vector<int>& nums) {
        int n = nums.size();
        if(n == 0) {
            return 0;
        }
        if(n == 1){
            return nums[0];
        }

        int start = 0;
        int end = n - 1;
        while(start + 1 < end){
            if(nums[start] < nums[end]){
                return nums[start];
            }
            int mid = start + (end - start) / 2;
            if(nums[mid] > nums[end]){
                start = mid + 1;
            }else if(nums[mid] < nums[end]){
                end = mid;
            }else{
                end--;
            }
        }
        if(nums[start] < nums[end]){
            return nums[start];
        }else {
            return nums[end];
        }
    }
};

算法改进，每次都和nums[end] 比较可以不用考虑是否rotate

class Solution {
public:
    int findMin(vector<int>& nums) {
        int n = nums.size();
        if(n == 0) {
            return 0;
        }
        if(n == 1){
            return nums[0];
        }

        int start = 0;
        int end = n - 1;
        while(start + 1 < end){
            if(nums[start] < nums[end]){
                return nums[start];
            }
            int mid = start + (end - start) / 2;
            if(nums[mid] > nums[end]){
                start = mid + 1;
            }else if(nums[mid] < nums[end]){
                end = mid;
            }else{
                end--;
            }
        }
        if(nums[start] < nums[end]){
            return nums[start];
        }else {
            return nums[end];
        }
    }
};
