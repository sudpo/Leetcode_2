算法总结，找和问题都能最终转化为2SUM 问题， 对于2SUM 问题有两种解法hash-table （O(n) / O(n) )和排序前后指针夹击算法（O(nlogn)/O(1) ) 

class Solution {

    vector<vector<int> > kSum(vector<int> &nums, int k, int startPos, int target){
        unordered_set<int> visited;
        vector<vector<int> > tmpVector;
        if(k == 2){
            int start = startPos;
            int end = nums.size() - 1;
            while(start < end){
                if(nums[start] + nums[end] == target){
                    if(visited.find(nums[start]) == visited.end()){
                        vector<int> temp;
                        temp.push_back(nums[start]);
                        temp.push_back(nums[end]);
                        visited.insert(nums[start]);
                        tmpVector.push_back(temp);
                    }
                    start++;
                    end--;
                }
                else if(nums[start] + nums[end] < target){
                    start++;
                }else{
                    end--;
                }
            }
            return tmpVector;
        }
        else{
            for(int i = startPos; i <= nums.size() - k; ++i){
                if((target > 0 && nums[i] > target) || (target < 0 && nums[i] > 0) ){
                    break;
                }
                if(visited.find(nums[i]) == visited.end()){
                    visited.insert(nums[i]);
                    vector<vector<int> > tmpRes = kSum(nums, k-1, i+1, target - nums[i]);
                    for(int j = 0; j < tmpRes.size(); ++j) {
                        vector<int> & vec = tmpRes[j];
                        vec.insert(vec.begin(), nums[i]);
                        tmpVector.push_back(vec);
                    }
                }
            }
            return tmpVector;
        }
    }

    vector < vector<int>> ans;
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        if(nums.size() < 4) {
            return ans;
        }
        sort(nums.begin(), nums.end());
        return kSum(nums, 4, 0, target);
    }
};

