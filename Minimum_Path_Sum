算法1： 自顶向下dp 
class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int n = grid.size();
        if(n == 0){
            return 0;
        }
        int m = grid[0].size();
        if(m == 0){
            return 0;
        }

        vector<vector<int> > dp(n, vector<int> (m, 0));
        dp[0][0] = grid[0][0];
        for(int j = 1; j < m; ++j) {
            dp[0][j] = dp[0][j-1] + grid[0][j];
        }
        for(int i = 1; i < n; ++i){
            dp[i][0] = dp[i-1][0] + grid[i][0];
        }

        for(int i = 1; i < n; ++i) {
            for(int j = 1; j < m; ++j) {
                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j];
            }
        }
        return dp[n-1][m-1];
    }
};

算法1改进， 因为dp[i][j] 只与dp[i-1][j] 相关， 所以二维数组dp可以变为一维dp 

class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int n = grid.size();
        if(n == 0){
            return 0;
        }
        int m = grid[0].size();
        if(m == 0){
            return 0;
        }

        vector<int> dp(grid[0]);
        for(int j = 1; j < m; ++j) {
            dp[j] = dp[j-1] + grid[0][j];
        }

        for(int i = 1; i < n; ++i) {
            dp[0] = dp[0] + grid[i][0];
            for(int j = 1; j < m; ++j) {
                dp[j] = min(dp[j], dp[j-1]) + grid[i][j];
            }
        }
        return dp[m-1];
    }
};

算法2： 自底向上dp, 不需要额外空间 但是要改变原来的grid

class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int n = grid.size();
        if(n == 0){
            return 0;
        }
        int m = grid[0].size();
        if(m == 0){
            return 0;
        }

        for(int i = n-2 ; i >= 0; --i){
            grid[i][m-1] += grid[i+1][m-1];
        }
        for(int j = m -2; j >= 0; --j){
            grid[n-1][j] += grid[n-1][j+1];
        }

        for(int i = n -2; i >=0; --i){
            for(int j = m -2; j >=0; --j){
                grid[i][j] += min(grid[i+1][j], grid[i][j+1]);
            }
        }
        return grid[0][0];
    }
};
