class Solution {
    bool isVerticalValid(vector<vector<char> > &board){
        for(int j = 0; j < 9; ++j){
            set<char> test;
            for(int i = 0; i < 9; ++i){
                if(board[i][j] != '.'){
                    if(test.find(board[i][j]) == test.end()){
                        test.insert(board[i][j]);
                    }else{
                        return false;
                    }
                }
            }
        }
        return true;
    }

    bool isHoriValid(vector<vector<char> > &board){
        for(int i = 0; i < 9; ++i){
            set<char> test;
            for(int j = 0; j < 9; ++j){
                if(board[i][j] != '.'){
                    if(test.find(board[i][j]) == test.end()){
                        test.insert(board[i][j]);
                    }else{
                        return false;
                    }
                }
            }
        }
        return true;
    }

    bool isCellValid(vector<vector<char> > &board){
        for(int i = 0 ; i <= 6; i += 3){
            for(int j = 0; j <= 6; j += 3){
                set<char> test;
                for(int k = 0; k < 3; ++k){
                    for(int p = 0; p < 3; ++p){
                        if(board[i+k][j+p] != '.'){
                            if(test.find(board[i+k][j+p]) == test.end()){
                                test.insert(board[i+k][j+p]);
                            }else{
                                return false;
                            }
                        }
                    }
                }
            }
        }
        return true;
    }

public:
    bool isValidSudoku(vector<vector<char>>& board) {
        return isCellValid(board) && isHoriValid(board) && isVerticalValid(board);
    }
};
