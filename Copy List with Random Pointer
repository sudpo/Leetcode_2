/**
 * Definition for singly-linked list with a random pointer.
 * struct RandomListNode {
 *     int label;
 *     RandomListNode *next, *random;
 *     RandomListNode(int x) : label(x), next(NULL), random(NULL) {}
 * };
 */
class Solution {
public:
    RandomListNode *copyRandomList(RandomListNode *head) {
        if(head == NULL) {
            return head;
        }
        RandomListNode *dummy = new RandomListNode(0);
        RandomListNode *newHead = NULL;
        RandomListNode *curr = head;
        unordered_map<RandomListNode *, RandomListNode *> oldToNew;
        while(curr != NULL){
            RandomListNode *newNode = new RandomListNode(curr->label);
            if(newHead == NULL){
                newHead = newNode;
                dummy->next = newHead;
            }else{
                newHead->next = newNode;
                newHead = newHead->next;
            }
            oldToNew[curr] = newNode;
            curr = curr->next;
        }

        newHead = dummy->next;
        curr = head;
        while(curr != NULL){
            oldToNew[curr]->random = oldToNew[curr->random];
            curr=curr->next;
        }

        return dummy->next;

    }
};
