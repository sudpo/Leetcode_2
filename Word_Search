class Solution {
    bool exist(vector<vector<char>> & board, vector<vector<bool>> &isVisited, string word, int start, int i, int j, int nRows, int nColumns){
        if(start == word.size()) {
            return true;
        }
        //right
        if(j + 1 < nColumns && board[i][j+1] == word[start] && !isVisited[i][j+1]){
            isVisited[i][j+1] = true;
            if(exist(board, isVisited, word, start+1, i, j+1, nRows, nColumns)){
                return true;
            }
            isVisited[i][j+1] = false;
        }
        //left
        if(j - 1 >= 0 && board[i][j-1] == word[start] && !isVisited[i][j-1]){
            isVisited[i][j-1] = true;
            if(exist(board, isVisited, word, start+1, i, j-1, nRows, nColumns)){
                return true;
            }
            isVisited[i][j-1] = false;
        }
        //up
        if(i-1>=0 && board[i-1][j] == word[start] && !isVisited[i-1][j]){
            isVisited[i-1][j] = true;
            if(exist(board, isVisited, word, start+1, i-1,j, nRows, nColumns)){
                return true;
            }
            isVisited[i-1][j] = false;
        }

        //down
        if(i+1< nRows && board[i+1][j] == word[start] && !isVisited[i+1][j]){
            isVisited[i+1][j] = true;
            if(exist(board, isVisited, word, start+1, i+1, j, nRows, nColumns)){
                return true;
            }
            isVisited[i+1][j] = false;
        }
        return false;
    }
public:
    bool exist(vector<vector<char>>& board, string word) {
        int n = board.size();
        if(n == 0) {
            return false;
        }
        int m = board[0].size();
        if(m == 0){
            return false;
        }
        if(word.size() == 0){
            return true;
        }
        vector<vector<bool> > isVisited(n, vector<bool>(m, false));
        vector<int> letterCnt(256, 0);
        for(int i = 0; i < n; ++i){
            for(int j = 0; j < m; ++j){
                letterCnt[board[i][j]] ++;
            }
        }
        for(int i = 0; i < word.size(); ++i){
            letterCnt[word[i]]--;
            if(letterCnt[word[i]] < 0){
                return false;
            }
        }
        for(int i = 0; i < n; ++i){
            for(int j = 0; j < m; ++j){
                if(board[i][j] == word[0]){
                    isVisited[i][j] = true;
                    if(exist(board, isVisited, word, 1, i, j, n, m)){
                        return true;
                    }
                    isVisited[i][j] = false;
                }
            }
        }
        return false;
    }
};
