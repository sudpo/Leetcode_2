算法1：
This problem can be solved iteratively, take[1,2,3] in the problem statement as an example, the process of generating all the subsets are
Initially [[]]
Adding the first number to all existed subsets[[], [1]]
Adding the second number to all existed subsets[[], [1], [2], [1,2]]
Adding the third number to all existed subsets[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]

class Solution {

public:
    vector<vector<int>> subsets(vector<int>& nums) {
        int n = nums.size();
        vector<vector<int> > res(1, vector<int>());
        if(n == 0) {
            return res;
        }
        sort(nums.begin(), nums.end());
        for(int i = 0; i < n; ++i) {
            int size = res.size();
            for(int j = 0; j < size; ++j) {
                res.push_back(res[j]);
                res.back().push_back(nums[i]);
            }
        }

        return res;
    }
};

算法2：backtracking 递归
class Solution {
    void subsets(vector<int>& nums, vector<int> &solution, vector<vector<int> > &res, int start ){
        res.push_back(solution);
        if(start == nums.size()) {
            return;
        }
        for(int i = start; i < nums.size(); ++i){
            solution.push_back(nums[i]);
            subsets(nums, solution, res, i+1);
            solution.pop_back();
        }
        return;
    }
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        int n = nums.size();
        vector<vector<int> > res;
        if(n == 0) {
            return res;
        }
        sort(nums.begin(), nums.end());
        vector<int> solution;
        subsets(nums, solution, res, 0);
        return res;
    }
};
